# üöö Assistente de Delivery com AWS Step Functions üçï  

Este reposit√≥rio apresenta um **assistente de delivery** utilizando **AWS Step Functions**. Este fluxo de trabalho simula um processo simples de entrega, incluindo:  

1. üì• **Receber o pedido**  
2. üí≥ **Confirmar o pagamento**  
3. üç¥ **Preparar o pedido**  
4. üö¶ **Atualizar o status da entrega**  
5. üì≤ **Notificar o cliente**  

---

## üìã Defini√ß√£o do Fluxo de Trabalho (Step Functions)  

Abaixo est√° a defini√ß√£o em **Amazon States Language (ASL)** do fluxo de trabalho Step Functions:  

```json
{
  "Comment": "Fluxo de trabalho para um assistente de delivery",
  "StartAt": "ReceberPedido",
  "States": {
    "ReceberPedido": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:ReceberPedido",
      "Next": "ConfirmarPagamento"
    },
    "ConfirmarPagamento": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.pagamento",
          "StringEquals": "Aprovado",
          "Next": "PrepararPedido"
        }
      ],
      "Default": "PagamentoRejeitado"
    },
    "PagamentoRejeitado": {
      "Type": "Fail",
      "Error": "PagamentoRejeitado",
      "Cause": "O pagamento n√£o foi aprovado."
    },
    "PrepararPedido": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:PrepararPedido",
      "Next": "AtualizarStatusEntrega"
    },
    "AtualizarStatusEntrega": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:AtualizarStatusEntrega",
      "Next": "NotificarCliente"
    },
    "NotificarCliente": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:REGION:ACCOUNT_ID:function:NotificarCliente",
      "End": true
    }
  }
}

## üõ†Ô∏è Explica√ß√£o das Etapas
- 1Ô∏è‚É£ ReceberPedido
Uma fun√ß√£o Lambda que recebe os detalhes do pedido do cliente.
- 2Ô∏è‚É£ ConfirmarPagamento
Verifica se o pagamento foi aprovado:
Aprovado: Continua para preparar o pedido.
Rejeitado: Encerra o fluxo com erro.
- 3Ô∏è‚É£ PrepararPedido
Uma fun√ß√£o Lambda que processa a prepara√ß√£o do pedido, como cozinhar a comida ou embalar os itens.
- 4Ô∏è‚É£ AtualizarStatusEntrega
Atualiza o status do pedido (por exemplo, "Em prepara√ß√£o", "A caminho", etc.).
- 5Ô∏è‚É£ NotificarCliente
Notifica o cliente sobre o status do pedido via e-mail, SMS ou aplicativo.

üêç Fun√ß√µes Lambda

Exemplo: ReceberPedido

python
import json

def lambda_handler(event, context):
    pedido = {
        "id": event["id"],
        "itens": event["itens"],
        "cliente": event["cliente"]
    }
    return {
        "statusCode": 200,
        "body": json.dumps(pedido)
    }


Exemplo: ConfirmarPagamento

python
import random

def lambda_handler(event, context):
    pagamento = random.choice(["Aprovado", "Rejeitado"])
    return {
        "pagamento": pagamento
    }


Exemplo: NotificarCliente

python
import boto3

def lambda_handler(event, context):
    cliente = event["cliente"]
    mensagem = f"Ol√° {cliente['nome']}, seu pedido est√° a caminho!"
    # L√≥gica para enviar mensagem (SNS, e-mail, etc.)
    return {"mensagem": mensagem}

üöÄ Implanta√ß√£o
1Ô∏è‚É£ Crie as fun√ß√µes Lambda
Implante as fun√ß√µes Lambda mencionadas acima no console da AWS.
2Ô∏è‚É£ Configure o Step Functions
Importe a defini√ß√£o do fluxo de trabalho no Step Functions utilizando o JSON fornecido.
3Ô∏è‚É£ Configure permiss√µes
Certifique-se de que o Step Functions possui permiss√µes para invocar as fun√ß√µes Lambda.
4Ô∏è‚É£ Teste o fluxo

Envie eventos de entrada no Step Functions, como o exemplo abaixo:

json
{
  "id": "12345",
  "itens": ["Pizza", "Refrigerante"],
  "cliente": {
    "nome": "Jo√£o Silva",
    "telefone": "+55 11 98765-4321"
  }
}
